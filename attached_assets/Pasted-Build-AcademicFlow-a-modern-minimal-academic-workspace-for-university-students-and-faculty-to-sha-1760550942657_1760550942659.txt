Build AcademicFlow - a modern, minimal academic workspace for university students and faculty to share notes, generate citations, and verify academic integrity.

===========================================
PROJECT OVERVIEW
===========================================

AcademicFlow is a clean, professional platform with two user types:
- Students: Share notes/code, generate citations, get AI writing help
- Faculty: Check AI-written assignments, verify citations, review submissions

Design Philosophy: Minimal, modern, professional - like Notion meets Linear.

===========================================
TECH STACK
===========================================

Frontend:
- React 18 with Vite
- Tailwind CSS for styling
- Framer Motion for animations
- Radix UI for accessible components
- Lucide Icons for modern iconography
- React Router for navigation

Backend:
- Node.js + Express
- MongoDB with Mongoose
- JWT authentication
- OpenAI API for AI features
- AWS S3 with Multer for file uploads

===========================================
DATABASE MODELS
===========================================

User Model:
{
  email: String (unique),
  password: String (hashed),
  name: String,
  role: "student" | "faculty",
  department: String,
  createdAt: Date
}

Note Model:
{
  userId: ObjectId (ref: User),
  title: String,
  content: String,
  noteType: "research" | "code" | "general",
  language: String (for code notes),
  isPublic: Boolean,
  shareToken: String (UUID for sharing),
  createdAt: Date,
  updatedAt: Date
}

Citation Model:
{
  noteId: ObjectId (ref: Note),
  inputText: String,
  formattedCitation: String,
  citationStyle: "APA" | "MLA" | "IEEE",
  createdAt: Date
}

Submission Model (Faculty only):
{
  studentId: ObjectId (ref: User),
  facultyId: ObjectId (ref: User),
  assignmentName: String,
  content: String,
  fileUrls: [String],
  aiDetectionScore: Number,
  citationVerified: Boolean,
  grade: String,
  feedback: String,
  submittedAt: Date,
  reviewedAt: Date
}

===========================================
DESIGN SYSTEM
===========================================

Color Palette:
- Primary: #4F46E5 (Indigo 600)
- Secondary: #8B5CF6 (Purple 500)
- Success: #10B981 (Emerald 500)
- Warning: #F59E0B (Amber 500)
- Danger: #EF4444 (Red 500)
- Neutral: #6B7280 (Gray 500)
- Background: #F9FAFB (Gray 50)
- Card Background: #FFFFFF (White)

Typography:
- Font Family: Inter (primary), JetBrains Mono (code)
- Headings: 600 weight
- Body: 400 weight
- Line Height: 1.5

Component Styling:
- Border Radius: 12px (cards), 8px (buttons)
- Shadows: subtle (0 1px 3px rgba(0,0,0,0.1))
- Spacing: 16px base unit (4, 8, 16, 24, 32, 48, 64)
- Transitions: 150ms ease-in-out

===========================================
PAGE STRUCTURE & ROUTES
===========================================

PUBLIC ROUTES:
/ - Landing page with hero section
/login - Login page
/register - Register page (select student or faculty role)

STUDENT ROUTES:
/dashboard - Student dashboard with quick action cards
/editor/:id - Universal editor (adapts based on note type)
/notes - All notes library
/shared/:token - Public shared note view

FACULTY ROUTES:
/faculty/dashboard - Faculty dashboard with tools
/faculty/ai-detect - AI content detection tool
/faculty/citation-check - Citation verification tool
/faculty/submissions - Review student submissions
/faculty/submissions/:id - Individual submission review

API ENDPOINTS:
POST /api/auth/register - User registration
POST /api/auth/login - User login
GET /api/auth/me - Get current user

POST /api/notes - Create new note
GET /api/notes - Get user's notes
GET /api/notes/:id - Get specific note
PUT /api/notes/:id - Update note (auto-save)
DELETE /api/notes/:id - Delete note
POST /api/notes/:id/share - Generate share token
GET /api/notes/shared/:token - Get shared note

POST /api/citations/generate - Generate citation using OpenAI
POST /api/ai/improve - Improve writing with AI
POST /api/ai/summarize - Summarize text with AI
POST /api/ai/grammar - Check grammar with AI

POST /api/faculty/detect-ai - Detect AI-written content
POST /api/faculty/verify-citations - Verify citation authenticity
POST /api/submissions - Create submission
GET /api/submissions - Get submissions (faculty)
PUT /api/submissions/:id - Update grade/feedback

POST /api/upload - Upload file to AWS S3

===========================================
DETAILED PAGE DESIGNS
===========================================

1. LANDING PAGE (/)
Layout:
- Clean hero section with gradient background (indigo to purple)
- Headline: "Modern Academic Workspace"
- Subheadline: "Share. Cite. Verify."
- CTA buttons: "Get Started" (primary), "Learn More" (secondary)
- Three feature cards below hero:
  * Card 1: Icon (file-text), "Share Notes & Code"
  * Card 2: Icon (check-circle), "AI Citations"
  * Card 3: Icon (shield), "Verify Authenticity"
- Footer with links

2. STUDENT DASHBOARD (/dashboard)
Layout:
- Top navigation: Logo, Search bar, Profile dropdown
- Welcome section: "Welcome back, [Name]! üëã"
- Quick Actions Grid (2x2):
  * Card: "üìù Share Notes" ‚Üí creates general note
  * Card: "‚úèÔ∏è Write Paper" ‚Üí creates research note
  * Card: "üíª Share Code" ‚Üí creates code note
  * Card: "üîç Find Notes" ‚Üí goes to /notes
- Recent Notes Section:
  * List of recent notes with title, type badge, timestamp
  * Click to open in editor
- Floating "+" button (bottom right) for quick note creation

3. FACULTY DASHBOARD (/faculty/dashboard)
Layout:
- Top navigation: Logo, Search bar, Profile dropdown
- Welcome section: "Professor Dashboard üéì"
- Faculty Tools Grid (2x2):
  * Card: "ü§ñ AI Detection" ‚Üí /faculty/ai-detect
  * Card: "‚úì Citation Checker" ‚Üí /faculty/citation-check
  * Card: "üìä Review Submissions" ‚Üí /faculty/submissions
  * Card: "üì§ Share Materials" ‚Üí creates note
- Recent Activity Feed:
  * "5 new submissions awaiting review"
  * "2 AI detection alerts"
  * Clickable items

4. EDITOR PAGE (/editor/:id)
Layout:
- Minimal header: Back button, Title input (inline editable), Share button, More menu (‚ãÆ)
- Main editor area (full width, distraction-free):
  * For research notes: Quill.js rich text editor
  * For code notes: CodeMirror with syntax highlighting
  * For general notes: Simple textarea
- Floating toolbar (appears on text selection):
  * Bold, Italic, Link, Code, Upload
  * "‚úèÔ∏è AI" dropdown (Improve, Summarize, Grammar)
  * "üìñ Cite" button
- Right sidebar (collapsible):
  * Citations list (for research notes)
  * Uploaded files list
- Bottom status bar: "Auto-saved 2 min ago ‚úì"

5. AI CITATION MODAL (triggered from editor)
Design:
- Centered modal with backdrop blur
- Modal content:
  * Heading: "Generate Citation"
  * Input field: "Enter DOI, URL, or description"
  * Dropdown: "Citation Style" [APA, MLA, IEEE]
  * Button: "Generate Citation ‚Üí" (primary color)
  * Divider line
  * Result area:
    - Shows generated citation
    - Buttons: "Copy" (with success feedback), "Insert"
- Smooth slide-in animation (200ms)
- Close button (√ó) in top right

6. AI DETECTION TOOL (/faculty/ai-detect)
Layout:
- Header: "AI Content Detection" with back button
- Instructions: "Paste student submission or upload file"
- Large textarea (600px height)
- OR file upload area (drag-and-drop)
- Button: "Analyze Content ‚Üí" (primary color)
- Results section (appears after analysis):
  * Card with AI score:
    - Large percentage: "82%"
    - Status badge: "‚ö†Ô∏è High Likelihood" (color-coded)
    - Expandable "Analysis Details" section
  * Button: "View Highlighted Text" (opens modal with highlighted suspicious parts)
  * Button: "Export Report" (downloads PDF)

7. CITATION CHECKER (/faculty/citation-check)
Layout:
- Header: "Citation Authenticity Checker" with back button
- Instructions: "Paste citations or upload document"
- Textarea for pasting citations
- OR file upload (PDF, DOCX)
- Dropdown: "Citation Style" [APA, MLA, IEEE]
- Button: "Verify All ‚Üí" (primary color)
- Results section:
  * Summary cards:
    - "‚úì Verified: 8" (green)
    - "‚ö†Ô∏è Suspicious: 2" (yellow)
    - "‚úó Fake: 1" (red)
  * List of citations with status badges:
    - Each citation shows: Text, Status icon, Details
    - Expandable to show verification details
  * Button: "Download Report" (PDF export)

8. SUBMISSIONS REVIEW (/faculty/submissions)
Layout:
- Header: "Assignment Submissions" with filter tabs
- Tabs: All | Ungraded | Flagged | Graded
- Submission cards (list):
  * Student name, submission time
  * Status badge: Pending, AI Detected (with score), Graded
  * Quick action buttons: View, AI Check, Citation Check
  * If flagged: Warning badge with details
- Batch actions: "Run AI Check on All", "Export Grades"

===========================================
COMPONENT SPECIFICATIONS
===========================================

Button Component:
- Primary: Indigo background, white text, hover lift effect
- Secondary: White background, indigo border, indigo text
- Sizes: sm (py-2 px-4), md (py-3 px-6), lg (py-4 px-8)
- Rounded corners: 8px
- Transition: all 150ms ease

Card Component:
- White background
- Border radius: 12px
- Shadow: 0 1px 3px rgba(0,0,0,0.1)
- Hover: lift slightly (translateY(-2px)) and increase shadow
- Padding: 24px
- Transition: all 150ms ease

Input Component:
- Border: 1px solid gray-300
- Focus: border indigo-500, glow effect
- Border radius: 8px
- Padding: 12px 16px
- Font size: 16px

Modal Component:
- Backdrop: blur effect + dark overlay (opacity 0.5)
- Modal: white background, centered, max-width 600px
- Border radius: 16px
- Slide-in animation from bottom (200ms)
- Close on backdrop click or √ó button

Badge Component:
- Small rounded pill
- Colors:
  * Success: green-100 bg, green-700 text
  * Warning: amber-100 bg, amber-700 text
  * Danger: red-100 bg, red-700 text
  * Neutral: gray-100 bg, gray-700 text
- Padding: 4px 12px
- Font size: 14px

===========================================
AI INTEGRATION DETAILS
===========================================

OpenAI Citation Generator:
Endpoint: POST /api/citations/generate
Request: { input: string, style: "APA"|"MLA"|"IEEE" }
OpenAI Prompt:
"You are an academic citation generator. Generate a properly formatted {style} citation for the following source: {input}. 
Return ONLY the formatted citation, nothing else. 
Format: Author. (Year). Title. Publisher/Journal."

OpenAI Writing Assistant:
Endpoints: /api/ai/improve, /api/ai/summarize, /api/ai/grammar
Prompts:
- Improve: "Improve this academic text for clarity and professional tone: {text}"
- Summarize: "Summarize this text in 2-3 sentences: {text}"
- Grammar: "Fix grammar and improve this text: {text}"

OpenAI AI Detection:
Endpoint: POST /api/faculty/detect-ai
Use GPTZero API or OpenAI custom prompt:
"Analyze this text and determine if it was likely written by AI. Score from 0-100. 
Look for: uniform sentence structure, generic examples, lack of personal voice.
Return JSON: { score: number, indicators: string[] }"

Citation Verification:
Endpoint: POST /api/faculty/verify-citations
Logic:
1. Extract citations from text
2. For each citation, try to verify using CrossRef API (DOI lookup)
3. If DOI not found, mark as suspicious
4. Check author names, dates using Google Scholar API fallback
5. Return verified/suspicious/fake status for each

===========================================
AWS S3 FILE UPLOAD
===========================================

Setup:
- Use Multer for file handling
- Upload to S3 bucket: academicflow-files
- Generate unique filenames: {userId}-{timestamp}-{originalname}
- Set ACL to public-read
- Return S3 URL

Endpoint: POST /api/upload
Request: multipart/form-data with file
Response: { url: "https://bucket.s3.region.amazonaws.com/file.pdf" }

===========================================
AUTHENTICATION
===========================================

- Use bcrypt for password hashing
- Use JWT for session management
- Token expiry: 7 days
- Store token in httpOnly cookie
- Middleware: verifyToken for protected routes
- Role-based access: student vs faculty routes

Registration Flow:
1. User fills form with email, password, name, role
2. Server hashes password
3. Create user in database
4. Generate JWT token
5. Return token + user data
6. Redirect to appropriate dashboard

Login Flow:
1. User enters email, password
2. Server validates credentials
3. Generate JWT token
4. Return token + user data
5. Redirect to dashboard

===========================================
ANIMATIONS & INTERACTIONS
===========================================

Page Transitions:
- Fade in on load (300ms)
- Smooth route transitions using Framer Motion

Button Interactions:
- Hover: lift slightly (2px), increase shadow
- Active: scale down slightly (0.98)
- Disabled: opacity 0.5, cursor not-allowed

Card Interactions:
- Hover: lift slightly (4px), increase shadow
- Clickable cards: cursor pointer

Loading States:
- Spinner for API calls
- Skeleton loaders for content
- Progress bars for file uploads

Success Feedback:
- Toast notifications (top-right corner)
- Success checkmark animations
- Copy-to-clipboard feedback

===========================================
RESPONSIVE DESIGN
===========================================

Breakpoints:
- Mobile: < 640px
- Tablet: 640px - 1024px
- Desktop: > 1024px

Mobile Adaptations:
- Dashboard cards: 1 column instead of 2x2 grid
- Hide sidebar in editor, add toggle button
- Stack navigation items vertically
- Larger touch targets (48px minimum)
- Bottom navigation for quick actions

===========================================
ENVIRONMENT VARIABLES (.env)
===========================================

PORT=5000
MONGODB_URI=mongodb://localhost:27017/academicflow
JWT_SECRET=your-super-secret-jwt-key
OPENAI_API_KEY=sk-your-openai-api-key
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_BUCKET_NAME=academicflow-files
AWS_REGION=ap-south-1

===========================================
IMPLEMENTATION PRIORITY
===========================================

Phase 1 (Core):
1. Setup project structure (React + Express + MongoDB)
2. Authentication (register, login, JWT)
3. Student dashboard with quick action cards
4. Basic note creation (all 3 types)
5. Editor with auto-save
6. Note sharing with public links

Phase 2 (AI Features):
7. AI citation generator with modal
8. AI writing assistant (improve, summarize, grammar)
9. Code syntax highlighting in code notes

Phase 3 (Faculty Tools):
10. Faculty dashboard
11. AI detection tool
12. Citation verification tool
13. Submissions review interface

Phase 4 (Polish):
14. File upload to S3
15. Animations and transitions
16. Responsive design
17. Dark mode (optional)

===========================================
IMPORTANT NOTES
===========================================

- Keep UI clean and minimal - no feature bloat
- Focus on core functionality first
- Use modern design patterns (glassmorphism, shadows, smooth animations)
- Ensure accessibility (ARIA labels, keyboard navigation)
- Add loading states for all async operations
- Handle errors gracefully with user-friendly messages
- Test responsive design on mobile, tablet, desktop
- Use environment variables for all secrets
- Add comments in code for clarity
- Follow React best practices (hooks, component composition)

START BY:
1. Setting up project structure with all dependencies
2. Creating database models
3. Building authentication system
4. Creating landing page and dashboards
5. Implementing editor with AI features
6. Adding faculty tools
7. Styling with Tailwind and adding animations
8. Testing and deploying

Generate complete, production-ready code with all features implemented.
